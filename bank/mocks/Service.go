// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bank "example.com/banking/bank"

	db "example.com/banking/db"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: ctx, accReq
func (_m *Service) CreateAccount(ctx context.Context, accReq bank.CreateAccountRequest) (bank.CreateAccountResponse, error) {
	ret := _m.Called(ctx, accReq)

	var r0 bank.CreateAccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, bank.CreateAccountRequest) bank.CreateAccountResponse); ok {
		r0 = rf(ctx, accReq)
	} else {
		r0 = ret.Get(0).(bank.CreateAccountResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bank.CreateAccountRequest) error); ok {
		r1 = rf(ctx, accReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Service_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//  - ctx context.Context
//  - accReq bank.CreateAccountRequest
func (_e *Service_Expecter) CreateAccount(ctx interface{}, accReq interface{}) *Service_CreateAccount_Call {
	return &Service_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, accReq)}
}

func (_c *Service_CreateAccount_Call) Run(run func(ctx context.Context, accReq bank.CreateAccountRequest)) *Service_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bank.CreateAccountRequest))
	})
	return _c
}

func (_c *Service_CreateAccount_Call) Return(accRes bank.CreateAccountResponse, err error) *Service_CreateAccount_Call {
	_c.Call.Return(accRes, err)
	return _c
}

// DepositAmount provides a mock function with given fields: ctx, accId, userID, amount
func (_m *Service) DepositAmount(ctx context.Context, accId string, userID string, amount float32) error {
	ret := _m.Called(ctx, accId, userID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float32) error); ok {
		r0 = rf(ctx, accId, userID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DepositAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DepositAmount'
type Service_DepositAmount_Call struct {
	*mock.Call
}

// DepositAmount is a helper method to define mock.On call
//  - ctx context.Context
//  - accId string
//  - userID string
//  - amount float32
func (_e *Service_Expecter) DepositAmount(ctx interface{}, accId interface{}, userID interface{}, amount interface{}) *Service_DepositAmount_Call {
	return &Service_DepositAmount_Call{Call: _e.mock.On("DepositAmount", ctx, accId, userID, amount)}
}

func (_c *Service_DepositAmount_Call) Run(run func(ctx context.Context, accId string, userID string, amount float32)) *Service_DepositAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float32))
	})
	return _c
}

func (_c *Service_DepositAmount_Call) Return(err error) *Service_DepositAmount_Call {
	_c.Call.Return(err)
	return _c
}

// GetAccountDetails provides a mock function with given fields: ctx, accId, userID
func (_m *Service) GetAccountDetails(ctx context.Context, accId string, userID string) (db.UserAccountDetails, error) {
	ret := _m.Called(ctx, accId, userID)

	var r0 db.UserAccountDetails
	if rf, ok := ret.Get(0).(func(context.Context, string, string) db.UserAccountDetails); ok {
		r0 = rf(ctx, accId, userID)
	} else {
		r0 = ret.Get(0).(db.UserAccountDetails)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, accId, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAccountDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountDetails'
type Service_GetAccountDetails_Call struct {
	*mock.Call
}

// GetAccountDetails is a helper method to define mock.On call
//  - ctx context.Context
//  - accId string
//  - userID string
func (_e *Service_Expecter) GetAccountDetails(ctx interface{}, accId interface{}, userID interface{}) *Service_GetAccountDetails_Call {
	return &Service_GetAccountDetails_Call{Call: _e.mock.On("GetAccountDetails", ctx, accId, userID)}
}

func (_c *Service_GetAccountDetails_Call) Run(run func(ctx context.Context, accId string, userID string)) *Service_GetAccountDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_GetAccountDetails_Call) Return(acc db.UserAccountDetails, err error) *Service_GetAccountDetails_Call {
	_c.Call.Return(acc, err)
	return _c
}

// GetAccountList provides a mock function with given fields: ctx
func (_m *Service) GetAccountList(ctx context.Context) ([]db.UserAccountDetails, error) {
	ret := _m.Called(ctx)

	var r0 []db.UserAccountDetails
	if rf, ok := ret.Get(0).(func(context.Context) []db.UserAccountDetails); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.UserAccountDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAccountList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountList'
type Service_GetAccountList_Call struct {
	*mock.Call
}

// GetAccountList is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Service_Expecter) GetAccountList(ctx interface{}) *Service_GetAccountList_Call {
	return &Service_GetAccountList_Call{Call: _e.mock.On("GetAccountList", ctx)}
}

func (_c *Service_GetAccountList_Call) Run(run func(ctx context.Context)) *Service_GetAccountList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_GetAccountList_Call) Return(accounts []db.UserAccountDetails, err error) *Service_GetAccountList_Call {
	_c.Call.Return(accounts, err)
	return _c
}

// GetTransactionDetails provides a mock function with given fields: ctx, accId, userID, startDate, endDate
func (_m *Service) GetTransactionDetails(ctx context.Context, accId string, userID string, startDate string, endDate string) ([]db.Transaction, error) {
	ret := _m.Called(ctx, accId, userID, startDate, endDate)

	var r0 []db.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) []db.Transaction); ok {
		r0 = rf(ctx, accId, userID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, accId, userID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetTransactionDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionDetails'
type Service_GetTransactionDetails_Call struct {
	*mock.Call
}

// GetTransactionDetails is a helper method to define mock.On call
//  - ctx context.Context
//  - accId string
//  - userID string
//  - startDate string
//  - endDate string
func (_e *Service_Expecter) GetTransactionDetails(ctx interface{}, accId interface{}, userID interface{}, startDate interface{}, endDate interface{}) *Service_GetTransactionDetails_Call {
	return &Service_GetTransactionDetails_Call{Call: _e.mock.On("GetTransactionDetails", ctx, accId, userID, startDate, endDate)}
}

func (_c *Service_GetTransactionDetails_Call) Run(run func(ctx context.Context, accId string, userID string, startDate string, endDate string)) *Service_GetTransactionDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *Service_GetTransactionDetails_Call) Return(transactions []db.Transaction, err error) *Service_GetTransactionDetails_Call {
	_c.Call.Return(transactions, err)
	return _c
}

// Login provides a mock function with given fields: ctx, lReq
func (_m *Service) Login(ctx context.Context, lReq bank.LoginRequest) (string, time.Time, error) {
	ret := _m.Called(ctx, lReq)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, bank.LoginRequest) string); ok {
		r0 = rf(ctx, lReq)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 time.Time
	if rf, ok := ret.Get(1).(func(context.Context, bank.LoginRequest) time.Time); ok {
		r1 = rf(ctx, lReq)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, bank.LoginRequest) error); ok {
		r2 = rf(ctx, lReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Service_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Service_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//  - ctx context.Context
//  - lReq bank.LoginRequest
func (_e *Service_Expecter) Login(ctx interface{}, lReq interface{}) *Service_Login_Call {
	return &Service_Login_Call{Call: _e.mock.On("Login", ctx, lReq)}
}

func (_c *Service_Login_Call) Run(run func(ctx context.Context, lReq bank.LoginRequest)) *Service_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bank.LoginRequest))
	})
	return _c
}

func (_c *Service_Login_Call) Return(tokenString string, tokenExpirationTime time.Time, err error) *Service_Login_Call {
	_c.Call.Return(tokenString, tokenExpirationTime, err)
	return _c
}

// WithdrawAmount provides a mock function with given fields: ctx, accId, userID, amount
func (_m *Service) WithdrawAmount(ctx context.Context, accId string, userID string, amount float32) error {
	ret := _m.Called(ctx, accId, userID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float32) error); ok {
		r0 = rf(ctx, accId, userID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_WithdrawAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawAmount'
type Service_WithdrawAmount_Call struct {
	*mock.Call
}

// WithdrawAmount is a helper method to define mock.On call
//  - ctx context.Context
//  - accId string
//  - userID string
//  - amount float32
func (_e *Service_Expecter) WithdrawAmount(ctx interface{}, accId interface{}, userID interface{}, amount interface{}) *Service_WithdrawAmount_Call {
	return &Service_WithdrawAmount_Call{Call: _e.mock.On("WithdrawAmount", ctx, accId, userID, amount)}
}

func (_c *Service_WithdrawAmount_Call) Run(run func(ctx context.Context, accId string, userID string, amount float32)) *Service_WithdrawAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(float32))
	})
	return _c
}

func (_c *Service_WithdrawAmount_Call) Return(err error) *Service_WithdrawAmount_Call {
	_c.Call.Return(err)
	return _c
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
